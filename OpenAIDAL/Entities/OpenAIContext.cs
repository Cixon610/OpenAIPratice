// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace OpenAIDAL.Entities
{
    public partial class OpenAIContext : DbContext
    {
        public OpenAIContext()
        {
        }

        public OpenAIContext(DbContextOptions<OpenAIContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AvailableIce> AvailableIce { get; set; }
        public virtual DbSet<AvailableSize> AvailableSize { get; set; }
        public virtual DbSet<AvailableSuger> AvailableSuger { get; set; }
        public virtual DbSet<AvailableTopping> AvailableTopping { get; set; }
        public virtual DbSet<Conversation> Conversation { get; set; }
        public virtual DbSet<Ipblocker> Ipblocker { get; set; }
        public virtual DbSet<ItemStore> ItemStore { get; set; }
        public virtual DbSet<LoginLog> LoginLog { get; set; }
        public virtual DbSet<MenuItem> MenuItem { get; set; }
        public virtual DbSet<MenuItemType> MenuItemType { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<OrderDetailTopping> OrderDetailTopping { get; set; }
        public virtual DbSet<Topping> Topping { get; set; }
        public virtual DbSet<ToppingStore> ToppingStore { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AvailableIce>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MenuItemId).HasColumnName("MenuItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<AvailableSize>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MenuItemId).HasColumnName("MenuItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<AvailableSuger>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MenuItemId).HasColumnName("MenuItemID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<AvailableTopping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MenuItemId).HasColumnName("MenuItemID");

                entity.Property(e => e.ToppingId).HasColumnName("ToppingID");
            });

            modelBuilder.Entity<Conversation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<Ipblocker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IPBlocker");

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ipaddress)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ItemStore>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MenuItemId).HasColumnName("MenuItemID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoginLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Device)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ipaddress)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<MenuItem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MenuItemTypeId).HasColumnName("MenuItemTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MenuItemType>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ConversationId).HasColumnName("ConversationID");

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Message1)
                    .IsRequired()
                    .HasColumnName("Message");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.MessageId).HasColumnName("MessageID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Ice)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Suger)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrderDetailTopping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Memo)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.OrderDetailId).HasColumnName("OrderDetailID");

                entity.Property(e => e.ToppingId).HasColumnName("ToppingID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Topping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ToppingStore>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ToppingId).HasColumnName("ToppingID");

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateDatetime).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}